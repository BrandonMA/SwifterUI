//
//  SFAssets.swift
//  SwifterUI
//
//  Created by Brandon Maldonado Alonso on 27/02/18.
//  Copyright Â© 2018 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class SFAssets : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfArrowRight: UIImage?
        static var arrowRightTargets: [AnyObject]?
        static var imageOfArrowDown: UIImage?
        static var arrowDownTargets: [AnyObject]?
        static var imageOfPlus: UIImage?
        static var plusTargets: [AnyObject]?
        static var imageOfClose: UIImage?
        static var closeTargets: [AnyObject]?
        static var imageOfCancelIcon: UIImage?
        static var cancelIconTargets: [AnyObject]?
        static var imageOfBigPlus: UIImage?
        static var bigPlusTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawArrowRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 20)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.29, y: 18.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 19.71), controlPoint1: CGPoint(x: -0.1, y: 18.68), controlPoint2: CGPoint(x: -0.1, y: 19.32))
        bezierPath.addCurve(to: CGPoint(x: 1.71, y: 19.71), controlPoint1: CGPoint(x: 0.68, y: 20.1), controlPoint2: CGPoint(x: 1.32, y: 20.1))
        bezierPath.addLine(to: CGPoint(x: 10.71, y: 10.71))
        bezierPath.addCurve(to: CGPoint(x: 10.71, y: 9.29), controlPoint1: CGPoint(x: 11.1, y: 10.32), controlPoint2: CGPoint(x: 11.1, y: 9.68))
        bezierPath.addLine(to: CGPoint(x: 1.71, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 0.29), controlPoint1: CGPoint(x: 1.32, y: -0.1), controlPoint2: CGPoint(x: 0.68, y: -0.1))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 1.71), controlPoint1: CGPoint(x: -0.1, y: 0.68), controlPoint2: CGPoint(x: -0.1, y: 1.32))
        bezierPath.addLine(to: CGPoint(x: 8.59, y: 10))
        bezierPath.addLine(to: CGPoint(x: 0.29, y: 18.29))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()

        context.restoreGState()

    }

    @objc dynamic public class func drawArrowDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 11), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 11)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 8.59))
        bezierPath.addLine(to: CGPoint(x: 1.71, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 0.29), controlPoint1: CGPoint(x: 1.32, y: -0.1), controlPoint2: CGPoint(x: 0.68, y: -0.1))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 1.71), controlPoint1: CGPoint(x: -0.1, y: 0.68), controlPoint2: CGPoint(x: -0.1, y: 1.32))
        bezierPath.addLine(to: CGPoint(x: 9.29, y: 10.71))
        bezierPath.addCurve(to: CGPoint(x: 10.71, y: 10.71), controlPoint1: CGPoint(x: 9.68, y: 11.1), controlPoint2: CGPoint(x: 10.32, y: 11.1))
        bezierPath.addLine(to: CGPoint(x: 19.71, y: 1.71))
        bezierPath.addCurve(to: CGPoint(x: 19.71, y: 0.29), controlPoint1: CGPoint(x: 20.1, y: 1.32), controlPoint2: CGPoint(x: 20.1, y: 0.68))
        bezierPath.addCurve(to: CGPoint(x: 18.29, y: 0.29), controlPoint1: CGPoint(x: 19.32, y: -0.1), controlPoint2: CGPoint(x: 18.68, y: -0.1))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.59))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()

        context.restoreGState()

    }

    @objc dynamic public class func drawPlus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11, y: 9))
        bezierPath.addLine(to: CGPoint(x: 11, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 11, y: 0.45), controlPoint2: CGPoint(x: 10.55, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 1), controlPoint1: CGPoint(x: 9.45, y: 0), controlPoint2: CGPoint(x: 9, y: 0.45))
        bezierPath.addLine(to: CGPoint(x: 9, y: 9))
        bezierPath.addLine(to: CGPoint(x: 1, y: 9))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 0.45, y: 9), controlPoint2: CGPoint(x: 0, y: 9.45))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 0, y: 10.55), controlPoint2: CGPoint(x: 0.45, y: 11))
        bezierPath.addLine(to: CGPoint(x: 9, y: 11))
        bezierPath.addLine(to: CGPoint(x: 9, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 9, y: 19.55), controlPoint2: CGPoint(x: 9.45, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 19), controlPoint1: CGPoint(x: 10.55, y: 20), controlPoint2: CGPoint(x: 11, y: 19.55))
        bezierPath.addLine(to: CGPoint(x: 11, y: 11))
        bezierPath.addLine(to: CGPoint(x: 19, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 19.55, y: 11), controlPoint2: CGPoint(x: 20, y: 10.55))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 9), controlPoint1: CGPoint(x: 20, y: 9.45), controlPoint2: CGPoint(x: 19.55, y: 9))
        bezierPath.addLine(to: CGPoint(x: 11, y: 9))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()

        context.restoreGState()

    }

    @objc dynamic public class func drawClose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.15, y: 6))
        bezierPath.addLine(to: CGPoint(x: 11.76, y: 10.61))
        bezierPath.addCurve(to: CGPoint(x: 11.76, y: 11.76), controlPoint1: CGPoint(x: 12.08, y: 10.93), controlPoint2: CGPoint(x: 12.08, y: 11.44))
        bezierPath.addCurve(to: CGPoint(x: 10.61, y: 11.76), controlPoint1: CGPoint(x: 11.44, y: 12.08), controlPoint2: CGPoint(x: 10.93, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 6, y: 7.15))
        bezierPath.addLine(to: CGPoint(x: 1.39, y: 11.76))
        bezierPath.addCurve(to: CGPoint(x: 0.24, y: 11.76), controlPoint1: CGPoint(x: 1.07, y: 12.08), controlPoint2: CGPoint(x: 0.56, y: 12.08))
        bezierPath.addCurve(to: CGPoint(x: 0.24, y: 10.61), controlPoint1: CGPoint(x: -0.08, y: 11.44), controlPoint2: CGPoint(x: -0.08, y: 10.93))
        bezierPath.addLine(to: CGPoint(x: 4.85, y: 6))
        bezierPath.addLine(to: CGPoint(x: 0.24, y: 1.39))
        bezierPath.addCurve(to: CGPoint(x: 0.24, y: 0.24), controlPoint1: CGPoint(x: -0.08, y: 1.07), controlPoint2: CGPoint(x: -0.08, y: 0.56))
        bezierPath.addCurve(to: CGPoint(x: 1.39, y: 0.24), controlPoint1: CGPoint(x: 0.56, y: -0.08), controlPoint2: CGPoint(x: 1.07, y: -0.08))
        bezierPath.addLine(to: CGPoint(x: 6, y: 4.85))
        bezierPath.addLine(to: CGPoint(x: 10.61, y: 0.24))
        bezierPath.addCurve(to: CGPoint(x: 11.76, y: 0.24), controlPoint1: CGPoint(x: 10.93, y: -0.08), controlPoint2: CGPoint(x: 11.44, y: -0.08))
        bezierPath.addCurve(to: CGPoint(x: 11.76, y: 1.39), controlPoint1: CGPoint(x: 12.08, y: 0.56), controlPoint2: CGPoint(x: 12.08, y: 1.07))
        bezierPath.addLine(to: CGPoint(x: 7.15, y: 6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()

        context.restoreGState()

    }

    @objc dynamic public class func drawCancelIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 0.251, blue: 0.251, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8, y: 6.59))
        bezierPath.addLine(to: CGPoint(x: 1.71, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 0.29), controlPoint1: CGPoint(x: 1.32, y: -0.1), controlPoint2: CGPoint(x: 0.68, y: -0.1))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 1.71), controlPoint1: CGPoint(x: -0.1, y: 0.68), controlPoint2: CGPoint(x: -0.1, y: 1.32))
        bezierPath.addLine(to: CGPoint(x: 6.59, y: 8))
        bezierPath.addLine(to: CGPoint(x: 0.29, y: 14.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 15.71), controlPoint1: CGPoint(x: -0.1, y: 14.68), controlPoint2: CGPoint(x: -0.1, y: 15.32))
        bezierPath.addCurve(to: CGPoint(x: 1.71, y: 15.71), controlPoint1: CGPoint(x: 0.68, y: 16.1), controlPoint2: CGPoint(x: 1.32, y: 16.1))
        bezierPath.addLine(to: CGPoint(x: 8, y: 9.41))
        bezierPath.addLine(to: CGPoint(x: 14.29, y: 15.71))
        bezierPath.addCurve(to: CGPoint(x: 15.71, y: 15.71), controlPoint1: CGPoint(x: 14.68, y: 16.1), controlPoint2: CGPoint(x: 15.32, y: 16.1))
        bezierPath.addCurve(to: CGPoint(x: 15.71, y: 14.29), controlPoint1: CGPoint(x: 16.1, y: 15.32), controlPoint2: CGPoint(x: 16.1, y: 14.68))
        bezierPath.addLine(to: CGPoint(x: 9.41, y: 8))
        bezierPath.addLine(to: CGPoint(x: 15.71, y: 1.71))
        bezierPath.addCurve(to: CGPoint(x: 15.71, y: 0.29), controlPoint1: CGPoint(x: 16.1, y: 1.32), controlPoint2: CGPoint(x: 16.1, y: 0.68))
        bezierPath.addCurve(to: CGPoint(x: 14.29, y: 0.29), controlPoint1: CGPoint(x: 15.32, y: -0.1), controlPoint2: CGPoint(x: 14.68, y: -0.1))
        bezierPath.addLine(to: CGPoint(x: 8, y: 6.59))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()

        context.restoreGState()

    }

    @objc dynamic public class func drawBigPlus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17.6, y: 14.4))
        bezierPath.addLine(to: CGPoint(x: 30.4, y: 14.4))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 31.28, y: 14.4), controlPoint2: CGPoint(x: 32, y: 15.12))
        bezierPath.addCurve(to: CGPoint(x: 30.4, y: 17.6), controlPoint1: CGPoint(x: 32, y: 16.88), controlPoint2: CGPoint(x: 31.28, y: 17.6))
        bezierPath.addLine(to: CGPoint(x: 17.6, y: 17.6))
        bezierPath.addLine(to: CGPoint(x: 17.6, y: 30.4))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 17.6, y: 31.28), controlPoint2: CGPoint(x: 16.88, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 14.4, y: 30.4), controlPoint1: CGPoint(x: 15.12, y: 32), controlPoint2: CGPoint(x: 14.4, y: 31.28))
        bezierPath.addLine(to: CGPoint(x: 14.4, y: 17.6))
        bezierPath.addLine(to: CGPoint(x: 1.6, y: 17.6))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 0.72, y: 17.6), controlPoint2: CGPoint(x: 0, y: 16.88))
        bezierPath.addCurve(to: CGPoint(x: 1.6, y: 14.4), controlPoint1: CGPoint(x: 0, y: 15.12), controlPoint2: CGPoint(x: 0.72, y: 14.4))
        bezierPath.addLine(to: CGPoint(x: 14.4, y: 14.4))
        bezierPath.addLine(to: CGPoint(x: 14.4, y: 1.6))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 14.4, y: 0.72), controlPoint2: CGPoint(x: 15.12, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 17.6, y: 1.6), controlPoint1: CGPoint(x: 16.88, y: 0), controlPoint2: CGPoint(x: 17.6, y: 0.72))
        bezierPath.addLine(to: CGPoint(x: 17.6, y: 14.4))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()

        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfArrowRight: UIImage {
        if Cache.imageOfArrowRight != nil {
            return Cache.imageOfArrowRight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 20), false, 0)
        SFAssets.drawArrowRight()

        Cache.imageOfArrowRight = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowRight!
    }

    @objc dynamic public class var imageOfArrowDown: UIImage {
        if Cache.imageOfArrowDown != nil {
            return Cache.imageOfArrowDown!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 11), false, 0)
        SFAssets.drawArrowDown()

        Cache.imageOfArrowDown = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowDown!
    }

    @objc dynamic public class var imageOfPlus: UIImage {
        if Cache.imageOfPlus != nil {
            return Cache.imageOfPlus!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
        SFAssets.drawPlus()

        Cache.imageOfPlus = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPlus!
    }

    @objc dynamic public class var imageOfClose: UIImage {
        if Cache.imageOfClose != nil {
            return Cache.imageOfClose!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 12, height: 12), false, 0)
        SFAssets.drawClose()

        Cache.imageOfClose = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfClose!
    }

    @objc dynamic public class var imageOfCancelIcon: UIImage {
        if Cache.imageOfCancelIcon != nil {
            return Cache.imageOfCancelIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
        SFAssets.drawCancelIcon()

        Cache.imageOfCancelIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCancelIcon!
    }

    @objc dynamic public class var imageOfBigPlus: UIImage {
        if Cache.imageOfBigPlus != nil {
            return Cache.imageOfBigPlus!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        SFAssets.drawBigPlus()

        Cache.imageOfBigPlus = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfBigPlus!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var arrowRightTargets: [AnyObject]! {
        get { return Cache.arrowRightTargets }
        set {
            Cache.arrowRightTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfArrowRight)
            }
        }
    }

    @objc @IBOutlet dynamic var arrowDownTargets: [AnyObject]! {
        get { return Cache.arrowDownTargets }
        set {
            Cache.arrowDownTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfArrowDown)
            }
        }
    }

    @objc @IBOutlet dynamic var plusTargets: [AnyObject]! {
        get { return Cache.plusTargets }
        set {
            Cache.plusTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfPlus)
            }
        }
    }

    @objc @IBOutlet dynamic var closeTargets: [AnyObject]! {
        get { return Cache.closeTargets }
        set {
            Cache.closeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfClose)
            }
        }
    }

    @objc @IBOutlet dynamic var cancelIconTargets: [AnyObject]! {
        get { return Cache.cancelIconTargets }
        set {
            Cache.cancelIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfCancelIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var bigPlusTargets: [AnyObject]! {
        get { return Cache.bigPlusTargets }
        set {
            Cache.bigPlusTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfBigPlus)
            }
        }
    }




    @objc(SFAssetsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}

