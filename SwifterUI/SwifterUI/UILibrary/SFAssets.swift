//
//  SFAssets.swift
//  SwifterUI
//
//  Created by Brandon Maldonado Alonso on 22/04/18.
//  Copyright Â© 2018 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class SFAssets : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfArrowRight: UIImage?
        static var arrowRightTargets: [AnyObject]?
        static var imageOfArrowDown: UIImage?
        static var arrowDownTargets: [AnyObject]?
        static var imageOfPlus: UIImage?
        static var plusTargets: [AnyObject]?
        static var imageOfClose: UIImage?
        static var closeTargets: [AnyObject]?
        static var imageOfCancelIcon: UIImage?
        static var cancelIconTargets: [AnyObject]?
        static var imageOfBigPlus: UIImage?
        static var bigPlusTargets: [AnyObject]?
        static var imageOfComposeIcon: UIImage?
        static var composeIconTargets: [AnyObject]?
        static var imageOfProfileIcon: UIImage?
        static var profileIconTargets: [AnyObject]?
        static var imageOfShareIcon: UIImage?
        static var shareIconTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawArrowRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 20)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.29, y: 18.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 19.71), controlPoint1: CGPoint(x: -0.1, y: 18.68), controlPoint2: CGPoint(x: -0.1, y: 19.32))
        bezierPath.addCurve(to: CGPoint(x: 1.71, y: 19.71), controlPoint1: CGPoint(x: 0.68, y: 20.1), controlPoint2: CGPoint(x: 1.32, y: 20.1))
        bezierPath.addLine(to: CGPoint(x: 10.71, y: 10.71))
        bezierPath.addCurve(to: CGPoint(x: 10.71, y: 9.29), controlPoint1: CGPoint(x: 11.1, y: 10.32), controlPoint2: CGPoint(x: 11.1, y: 9.68))
        bezierPath.addLine(to: CGPoint(x: 1.71, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 0.29), controlPoint1: CGPoint(x: 1.32, y: -0.1), controlPoint2: CGPoint(x: 0.68, y: -0.1))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 1.71), controlPoint1: CGPoint(x: -0.1, y: 0.68), controlPoint2: CGPoint(x: -0.1, y: 1.32))
        bezierPath.addLine(to: CGPoint(x: 8.59, y: 10))
        bezierPath.addLine(to: CGPoint(x: 0.29, y: 18.29))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawArrowDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 11), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 11)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 8.59))
        bezierPath.addLine(to: CGPoint(x: 1.71, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 0.29), controlPoint1: CGPoint(x: 1.32, y: -0.1), controlPoint2: CGPoint(x: 0.68, y: -0.1))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 1.71), controlPoint1: CGPoint(x: -0.1, y: 0.68), controlPoint2: CGPoint(x: -0.1, y: 1.32))
        bezierPath.addLine(to: CGPoint(x: 9.29, y: 10.71))
        bezierPath.addCurve(to: CGPoint(x: 10.71, y: 10.71), controlPoint1: CGPoint(x: 9.68, y: 11.1), controlPoint2: CGPoint(x: 10.32, y: 11.1))
        bezierPath.addLine(to: CGPoint(x: 19.71, y: 1.71))
        bezierPath.addCurve(to: CGPoint(x: 19.71, y: 0.29), controlPoint1: CGPoint(x: 20.1, y: 1.32), controlPoint2: CGPoint(x: 20.1, y: 0.68))
        bezierPath.addCurve(to: CGPoint(x: 18.29, y: 0.29), controlPoint1: CGPoint(x: 19.32, y: -0.1), controlPoint2: CGPoint(x: 18.68, y: -0.1))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.59))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPlus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11, y: 9))
        bezierPath.addLine(to: CGPoint(x: 11, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 11, y: 0.45), controlPoint2: CGPoint(x: 10.55, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 1), controlPoint1: CGPoint(x: 9.45, y: 0), controlPoint2: CGPoint(x: 9, y: 0.45))
        bezierPath.addLine(to: CGPoint(x: 9, y: 9))
        bezierPath.addLine(to: CGPoint(x: 1, y: 9))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 0.45, y: 9), controlPoint2: CGPoint(x: 0, y: 9.45))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 0, y: 10.55), controlPoint2: CGPoint(x: 0.45, y: 11))
        bezierPath.addLine(to: CGPoint(x: 9, y: 11))
        bezierPath.addLine(to: CGPoint(x: 9, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 9, y: 19.55), controlPoint2: CGPoint(x: 9.45, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 19), controlPoint1: CGPoint(x: 10.55, y: 20), controlPoint2: CGPoint(x: 11, y: 19.55))
        bezierPath.addLine(to: CGPoint(x: 11, y: 11))
        bezierPath.addLine(to: CGPoint(x: 19, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 19.55, y: 11), controlPoint2: CGPoint(x: 20, y: 10.55))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 9), controlPoint1: CGPoint(x: 20, y: 9.45), controlPoint2: CGPoint(x: 19.55, y: 9))
        bezierPath.addLine(to: CGPoint(x: 11, y: 9))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.15, y: 6))
        bezierPath.addLine(to: CGPoint(x: 11.76, y: 10.61))
        bezierPath.addCurve(to: CGPoint(x: 11.76, y: 11.76), controlPoint1: CGPoint(x: 12.08, y: 10.93), controlPoint2: CGPoint(x: 12.08, y: 11.44))
        bezierPath.addCurve(to: CGPoint(x: 10.61, y: 11.76), controlPoint1: CGPoint(x: 11.44, y: 12.08), controlPoint2: CGPoint(x: 10.93, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 6, y: 7.15))
        bezierPath.addLine(to: CGPoint(x: 1.39, y: 11.76))
        bezierPath.addCurve(to: CGPoint(x: 0.24, y: 11.76), controlPoint1: CGPoint(x: 1.07, y: 12.08), controlPoint2: CGPoint(x: 0.56, y: 12.08))
        bezierPath.addCurve(to: CGPoint(x: 0.24, y: 10.61), controlPoint1: CGPoint(x: -0.08, y: 11.44), controlPoint2: CGPoint(x: -0.08, y: 10.93))
        bezierPath.addLine(to: CGPoint(x: 4.85, y: 6))
        bezierPath.addLine(to: CGPoint(x: 0.24, y: 1.39))
        bezierPath.addCurve(to: CGPoint(x: 0.24, y: 0.24), controlPoint1: CGPoint(x: -0.08, y: 1.07), controlPoint2: CGPoint(x: -0.08, y: 0.56))
        bezierPath.addCurve(to: CGPoint(x: 1.39, y: 0.24), controlPoint1: CGPoint(x: 0.56, y: -0.08), controlPoint2: CGPoint(x: 1.07, y: -0.08))
        bezierPath.addLine(to: CGPoint(x: 6, y: 4.85))
        bezierPath.addLine(to: CGPoint(x: 10.61, y: 0.24))
        bezierPath.addCurve(to: CGPoint(x: 11.76, y: 0.24), controlPoint1: CGPoint(x: 10.93, y: -0.08), controlPoint2: CGPoint(x: 11.44, y: -0.08))
        bezierPath.addCurve(to: CGPoint(x: 11.76, y: 1.39), controlPoint1: CGPoint(x: 12.08, y: 0.56), controlPoint2: CGPoint(x: 12.08, y: 1.07))
        bezierPath.addLine(to: CGPoint(x: 7.15, y: 6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCancelIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 0.251, blue: 0.251, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8, y: 6.59))
        bezierPath.addLine(to: CGPoint(x: 1.71, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 0.29), controlPoint1: CGPoint(x: 1.32, y: -0.1), controlPoint2: CGPoint(x: 0.68, y: -0.1))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 1.71), controlPoint1: CGPoint(x: -0.1, y: 0.68), controlPoint2: CGPoint(x: -0.1, y: 1.32))
        bezierPath.addLine(to: CGPoint(x: 6.59, y: 8))
        bezierPath.addLine(to: CGPoint(x: 0.29, y: 14.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 15.71), controlPoint1: CGPoint(x: -0.1, y: 14.68), controlPoint2: CGPoint(x: -0.1, y: 15.32))
        bezierPath.addCurve(to: CGPoint(x: 1.71, y: 15.71), controlPoint1: CGPoint(x: 0.68, y: 16.1), controlPoint2: CGPoint(x: 1.32, y: 16.1))
        bezierPath.addLine(to: CGPoint(x: 8, y: 9.41))
        bezierPath.addLine(to: CGPoint(x: 14.29, y: 15.71))
        bezierPath.addCurve(to: CGPoint(x: 15.71, y: 15.71), controlPoint1: CGPoint(x: 14.68, y: 16.1), controlPoint2: CGPoint(x: 15.32, y: 16.1))
        bezierPath.addCurve(to: CGPoint(x: 15.71, y: 14.29), controlPoint1: CGPoint(x: 16.1, y: 15.32), controlPoint2: CGPoint(x: 16.1, y: 14.68))
        bezierPath.addLine(to: CGPoint(x: 9.41, y: 8))
        bezierPath.addLine(to: CGPoint(x: 15.71, y: 1.71))
        bezierPath.addCurve(to: CGPoint(x: 15.71, y: 0.29), controlPoint1: CGPoint(x: 16.1, y: 1.32), controlPoint2: CGPoint(x: 16.1, y: 0.68))
        bezierPath.addCurve(to: CGPoint(x: 14.29, y: 0.29), controlPoint1: CGPoint(x: 15.32, y: -0.1), controlPoint2: CGPoint(x: 14.68, y: -0.1))
        bezierPath.addLine(to: CGPoint(x: 8, y: 6.59))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBigPlus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17.6, y: 14.4))
        bezierPath.addLine(to: CGPoint(x: 30.4, y: 14.4))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 31.28, y: 14.4), controlPoint2: CGPoint(x: 32, y: 15.12))
        bezierPath.addCurve(to: CGPoint(x: 30.4, y: 17.6), controlPoint1: CGPoint(x: 32, y: 16.88), controlPoint2: CGPoint(x: 31.28, y: 17.6))
        bezierPath.addLine(to: CGPoint(x: 17.6, y: 17.6))
        bezierPath.addLine(to: CGPoint(x: 17.6, y: 30.4))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 17.6, y: 31.28), controlPoint2: CGPoint(x: 16.88, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 14.4, y: 30.4), controlPoint1: CGPoint(x: 15.12, y: 32), controlPoint2: CGPoint(x: 14.4, y: 31.28))
        bezierPath.addLine(to: CGPoint(x: 14.4, y: 17.6))
        bezierPath.addLine(to: CGPoint(x: 1.6, y: 17.6))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 0.72, y: 17.6), controlPoint2: CGPoint(x: 0, y: 16.88))
        bezierPath.addCurve(to: CGPoint(x: 1.6, y: 14.4), controlPoint1: CGPoint(x: 0, y: 15.12), controlPoint2: CGPoint(x: 0.72, y: 14.4))
        bezierPath.addLine(to: CGPoint(x: 14.4, y: 14.4))
        bezierPath.addLine(to: CGPoint(x: 14.4, y: 1.6))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 14.4, y: 0.72), controlPoint2: CGPoint(x: 15.12, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 17.6, y: 1.6), controlPoint1: CGPoint(x: 16.88, y: 0), controlPoint2: CGPoint(x: 17.6, y: 0.72))
        bezierPath.addLine(to: CGPoint(x: 17.6, y: 14.4))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawComposeIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8.35, y: 10.4))
        bezierPath.addLine(to: CGPoint(x: 18.58, y: 0.18))
        bezierPath.addCurve(to: CGPoint(x: 19.42, y: 0.18), controlPoint1: CGPoint(x: 18.81, y: -0.06), controlPoint2: CGPoint(x: 19.19, y: -0.06))
        bezierPath.addLine(to: CGPoint(x: 20.58, y: 1.33))
        bezierPath.addCurve(to: CGPoint(x: 20.58, y: 2.18), controlPoint1: CGPoint(x: 20.81, y: 1.56), controlPoint2: CGPoint(x: 20.81, y: 1.94))
        bezierPath.addLine(to: CGPoint(x: 10.35, y: 12.4))
        bezierPath.addLine(to: CGPoint(x: 8.35, y: 10.4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8.1, y: 14.05))
        bezierPath.addLine(to: CGPoint(x: 6.57, y: 14.56))
        bezierPath.addCurve(to: CGPoint(x: 6.19, y: 14.37), controlPoint1: CGPoint(x: 6.41, y: 14.61), controlPoint2: CGPoint(x: 6.24, y: 14.53))
        bezierPath.addCurve(to: CGPoint(x: 6.19, y: 14.18), controlPoint1: CGPoint(x: 6.17, y: 14.31), controlPoint2: CGPoint(x: 6.17, y: 14.24))
        bezierPath.addLine(to: CGPoint(x: 6.7, y: 12.65))
        bezierPath.addCurve(to: CGPoint(x: 7.65, y: 11.11), controlPoint1: CGPoint(x: 6.89, y: 12.07), controlPoint2: CGPoint(x: 7.22, y: 11.54))
        bezierPath.addLine(to: CGPoint(x: 9.65, y: 13.1))
        bezierPath.addCurve(to: CGPoint(x: 8.1, y: 14.05), controlPoint1: CGPoint(x: 9.21, y: 13.53), controlPoint2: CGPoint(x: 8.68, y: 13.86))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.32, y: 1.61))
        bezierPath.addLine(to: CGPoint(x: 13.46, y: 2.46))
        bezierPath.addCurve(to: CGPoint(x: 12.76, y: 2.75), controlPoint1: CGPoint(x: 13.28, y: 2.65), controlPoint2: CGPoint(x: 13.02, y: 2.75))
        bezierPath.addLine(to: CGPoint(x: 3.85, y: 2.75))
        bezierPath.addCurve(to: CGPoint(x: 2.48, y: 2.92), controlPoint1: CGPoint(x: 2.93, y: 2.75), controlPoint2: CGPoint(x: 2.7, y: 2.79))
        bezierPath.addCurve(to: CGPoint(x: 2.16, y: 3.23), controlPoint1: CGPoint(x: 2.34, y: 2.99), controlPoint2: CGPoint(x: 2.24, y: 3.09))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 4.6), controlPoint1: CGPoint(x: 2.04, y: 3.46), controlPoint2: CGPoint(x: 2, y: 3.68))
        bezierPath.addLine(to: CGPoint(x: 2, y: 16.91))
        bezierPath.addCurve(to: CGPoint(x: 2.16, y: 18.27), controlPoint1: CGPoint(x: 2, y: 17.82), controlPoint2: CGPoint(x: 2.04, y: 18.05))
        bezierPath.addCurve(to: CGPoint(x: 2.48, y: 18.59), controlPoint1: CGPoint(x: 2.24, y: 18.41), controlPoint2: CGPoint(x: 2.34, y: 18.51))
        bezierPath.addCurve(to: CGPoint(x: 3.85, y: 18.75), controlPoint1: CGPoint(x: 2.7, y: 18.71), controlPoint2: CGPoint(x: 2.93, y: 18.75))
        bezierPath.addLine(to: CGPoint(x: 16.15, y: 18.75))
        bezierPath.addCurve(to: CGPoint(x: 17.52, y: 18.59), controlPoint1: CGPoint(x: 17.07, y: 18.75), controlPoint2: CGPoint(x: 17.3, y: 18.71))
        bezierPath.addCurve(to: CGPoint(x: 17.84, y: 18.27), controlPoint1: CGPoint(x: 17.66, y: 18.51), controlPoint2: CGPoint(x: 17.76, y: 18.41))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 16.91), controlPoint1: CGPoint(x: 17.96, y: 18.05), controlPoint2: CGPoint(x: 18, y: 17.82))
        bezierPath.addLine(to: CGPoint(x: 18, y: 7.99))
        bezierPath.addCurve(to: CGPoint(x: 18.29, y: 7.29), controlPoint1: CGPoint(x: 18, y: 7.73), controlPoint2: CGPoint(x: 18.11, y: 7.47))
        bezierPath.addLine(to: CGPoint(x: 19.15, y: 6.43))
        bezierPath.addCurve(to: CGPoint(x: 19.85, y: 6.43), controlPoint1: CGPoint(x: 19.34, y: 6.24), controlPoint2: CGPoint(x: 19.66, y: 6.24))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 6.79), controlPoint1: CGPoint(x: 19.95, y: 6.53), controlPoint2: CGPoint(x: 20, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 20, y: 16.91))
        bezierPath.addCurve(to: CGPoint(x: 19.6, y: 19.22), controlPoint1: CGPoint(x: 20, y: 18.24), controlPoint2: CGPoint(x: 19.86, y: 18.73))
        bezierPath.addCurve(to: CGPoint(x: 18.47, y: 20.35), controlPoint1: CGPoint(x: 19.34, y: 19.71), controlPoint2: CGPoint(x: 18.95, y: 20.09))
        bezierPath.addCurve(to: CGPoint(x: 16.15, y: 20.75), controlPoint1: CGPoint(x: 17.98, y: 20.61), controlPoint2: CGPoint(x: 17.49, y: 20.75))
        bezierPath.addLine(to: CGPoint(x: 3.85, y: 20.75))
        bezierPath.addCurve(to: CGPoint(x: 1.53, y: 20.35), controlPoint1: CGPoint(x: 2.51, y: 20.75), controlPoint2: CGPoint(x: 2.02, y: 20.61))
        bezierPath.addCurve(to: CGPoint(x: 0.4, y: 19.22), controlPoint1: CGPoint(x: 1.05, y: 20.09), controlPoint2: CGPoint(x: 0.66, y: 19.71))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 16.91), controlPoint1: CGPoint(x: 0.14, y: 18.73), controlPoint2: CGPoint(x: 0, y: 18.24))
        bezierPath.addLine(to: CGPoint(x: 0, y: 4.6))
        bezierPath.addCurve(to: CGPoint(x: 0.4, y: 2.29), controlPoint1: CGPoint(x: 0, y: 3.26), controlPoint2: CGPoint(x: 0.14, y: 2.78))
        bezierPath.addCurve(to: CGPoint(x: 1.53, y: 1.15), controlPoint1: CGPoint(x: 0.66, y: 1.8), controlPoint2: CGPoint(x: 1.05, y: 1.41))
        bezierPath.addCurve(to: CGPoint(x: 3.85, y: 0.75), controlPoint1: CGPoint(x: 2.02, y: 0.89), controlPoint2: CGPoint(x: 2.51, y: 0.75))
        bezierPath.addLine(to: CGPoint(x: 13.96, y: 0.75))
        bezierPath.addCurve(to: CGPoint(x: 14.46, y: 1.25), controlPoint1: CGPoint(x: 14.24, y: 0.75), controlPoint2: CGPoint(x: 14.46, y: 0.98))
        bezierPath.addCurve(to: CGPoint(x: 14.32, y: 1.61), controlPoint1: CGPoint(x: 14.46, y: 1.38), controlPoint2: CGPoint(x: 14.41, y: 1.51))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawProfileIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.5, y: 11.44))
        bezierPath.addCurve(to: CGPoint(x: 5.25, y: 5.72), controlPoint1: CGPoint(x: 7.6, y: 11.44), controlPoint2: CGPoint(x: 5.25, y: 8.88))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: -0), controlPoint1: CGPoint(x: 5.25, y: 2.56), controlPoint2: CGPoint(x: 7.6, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 15.75, y: 5.72), controlPoint1: CGPoint(x: 13.4, y: -0), controlPoint2: CGPoint(x: 15.75, y: 2.56))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 11.44), controlPoint1: CGPoint(x: 15.75, y: 8.88), controlPoint2: CGPoint(x: 13.4, y: 11.44))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 21, y: 18.5))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 18.5), controlPoint1: CGPoint(x: 21, y: 21.83), controlPoint2: CGPoint(x: 0, y: 21.83))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 12.48), controlPoint1: CGPoint(x: 0, y: 15.18), controlPoint2: CGPoint(x: 5.97, y: 12.48))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 18.5), controlPoint1: CGPoint(x: 15.03, y: 12.48), controlPoint2: CGPoint(x: 21, y: 15.18))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawShareIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.75, y: 0.04))
        bezierPath.addCurve(to: CGPoint(x: 10.94, y: 0.12), controlPoint1: CGPoint(x: 10.82, y: 0.06), controlPoint2: CGPoint(x: 10.88, y: 0.08))
        bezierPath.addCurve(to: CGPoint(x: 11.17, y: 0.3), controlPoint1: CGPoint(x: 11.03, y: 0.16), controlPoint2: CGPoint(x: 11.11, y: 0.23))
        bezierPath.addLine(to: CGPoint(x: 14.68, y: 3.76))
        bezierPath.addCurve(to: CGPoint(x: 14.68, y: 5), controlPoint1: CGPoint(x: 15.03, y: 4.1), controlPoint2: CGPoint(x: 15.03, y: 4.65))
        bezierPath.addCurve(to: CGPoint(x: 13.43, y: 5), controlPoint1: CGPoint(x: 14.34, y: 5.34), controlPoint2: CGPoint(x: 13.77, y: 5.34))
        bezierPath.addLine(to: CGPoint(x: 11.39, y: 2.99))
        bezierPath.addCurve(to: CGPoint(x: 11.39, y: 11.01), controlPoint1: CGPoint(x: 11.39, y: 2.99), controlPoint2: CGPoint(x: 11.39, y: 7.74))
        bezierPath.addCurve(to: CGPoint(x: 11.39, y: 14), controlPoint1: CGPoint(x: 11.39, y: 12.71), controlPoint2: CGPoint(x: 11.39, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 14.88), controlPoint1: CGPoint(x: 11.39, y: 14.49), controlPoint2: CGPoint(x: 10.99, y: 14.88))
        bezierPath.addCurve(to: CGPoint(x: 9.61, y: 14), controlPoint1: CGPoint(x: 10.01, y: 14.88), controlPoint2: CGPoint(x: 9.61, y: 14.49))
        bezierPath.addCurve(to: CGPoint(x: 9.61, y: 12.57), controlPoint1: CGPoint(x: 9.61, y: 14), controlPoint2: CGPoint(x: 9.61, y: 13.44))
        bezierPath.addCurve(to: CGPoint(x: 9.61, y: 2.99), controlPoint1: CGPoint(x: 9.61, y: 9.58), controlPoint2: CGPoint(x: 9.61, y: 2.99))
        bezierPath.addLine(to: CGPoint(x: 7.57, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 6.32, y: 5), controlPoint1: CGPoint(x: 7.23, y: 5.34), controlPoint2: CGPoint(x: 6.66, y: 5.34))
        bezierPath.addCurve(to: CGPoint(x: 6.32, y: 3.76), controlPoint1: CGPoint(x: 5.97, y: 4.65), controlPoint2: CGPoint(x: 5.97, y: 4.1))
        bezierPath.addLine(to: CGPoint(x: 9.7, y: 0.42))
        bezierPath.addCurve(to: CGPoint(x: 9.87, y: 0.26), controlPoint1: CGPoint(x: 9.77, y: 0.35), controlPoint2: CGPoint(x: 9.83, y: 0.3))
        bezierPath.addCurve(to: CGPoint(x: 10.75, y: 0.04), controlPoint1: CGPoint(x: 10.13, y: 0.01), controlPoint2: CGPoint(x: 10.46, y: -0.05))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17.12, y: 7.34))
        bezierPath.addCurve(to: CGPoint(x: 18.16, y: 8.36), controlPoint1: CGPoint(x: 17.57, y: 7.57), controlPoint2: CGPoint(x: 17.92, y: 7.92))
        bezierPath.addCurve(to: CGPoint(x: 18.5, y: 10.12), controlPoint1: CGPoint(x: 18.41, y: 8.83), controlPoint2: CGPoint(x: 18.5, y: 9.28))
        bezierPath.addLine(to: CGPoint(x: 18.5, y: 17.88))
        bezierPath.addCurve(to: CGPoint(x: 18.16, y: 19.64), controlPoint1: CGPoint(x: 18.5, y: 18.72), controlPoint2: CGPoint(x: 18.41, y: 19.17))
        bezierPath.addCurve(to: CGPoint(x: 17.12, y: 20.66), controlPoint1: CGPoint(x: 17.92, y: 20.08), controlPoint2: CGPoint(x: 17.57, y: 20.43))
        bezierPath.addCurve(to: CGPoint(x: 15.33, y: 21), controlPoint1: CGPoint(x: 16.65, y: 20.91), controlPoint2: CGPoint(x: 16.19, y: 21))
        bezierPath.addLine(to: CGPoint(x: 5.67, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 3.88, y: 20.66), controlPoint1: CGPoint(x: 4.81, y: 21), controlPoint2: CGPoint(x: 4.35, y: 20.91))
        bezierPath.addCurve(to: CGPoint(x: 2.84, y: 19.64), controlPoint1: CGPoint(x: 3.43, y: 20.43), controlPoint2: CGPoint(x: 3.08, y: 20.08))
        bezierPath.addCurve(to: CGPoint(x: 2.55, y: 18.76), controlPoint1: CGPoint(x: 2.69, y: 19.37), controlPoint2: CGPoint(x: 2.6, y: 19.1))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 17.88), controlPoint1: CGPoint(x: 2.52, y: 18.52), controlPoint2: CGPoint(x: 2.5, y: 18.23))
        bezierPath.addLine(to: CGPoint(x: 2.5, y: 10.12))
        bezierPath.addCurve(to: CGPoint(x: 2.84, y: 8.36), controlPoint1: CGPoint(x: 2.5, y: 9.28), controlPoint2: CGPoint(x: 2.59, y: 8.83))
        bezierPath.addCurve(to: CGPoint(x: 3.88, y: 7.34), controlPoint1: CGPoint(x: 3.08, y: 7.92), controlPoint2: CGPoint(x: 3.43, y: 7.57))
        bezierPath.addCurve(to: CGPoint(x: 5.67, y: 7), controlPoint1: CGPoint(x: 4.35, y: 7.09), controlPoint2: CGPoint(x: 4.81, y: 7))
        bezierPath.addLine(to: CGPoint(x: 6.94, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 7.83, y: 7.88), controlPoint1: CGPoint(x: 7.44, y: 7), controlPoint2: CGPoint(x: 7.83, y: 7.39))
        bezierPath.addCurve(to: CGPoint(x: 6.94, y: 8.75), controlPoint1: CGPoint(x: 7.83, y: 8.36), controlPoint2: CGPoint(x: 7.44, y: 8.75))
        bezierPath.addLine(to: CGPoint(x: 5.67, y: 8.75))
        bezierPath.addCurve(to: CGPoint(x: 4.72, y: 8.88), controlPoint1: CGPoint(x: 5.08, y: 8.75), controlPoint2: CGPoint(x: 4.9, y: 8.78))
        bezierPath.addCurve(to: CGPoint(x: 4.41, y: 9.18), controlPoint1: CGPoint(x: 4.58, y: 8.95), controlPoint2: CGPoint(x: 4.48, y: 9.05))
        bezierPath.addCurve(to: CGPoint(x: 4.28, y: 10.12), controlPoint1: CGPoint(x: 4.31, y: 9.36), controlPoint2: CGPoint(x: 4.28, y: 9.54))
        bezierPath.addCurve(to: CGPoint(x: 4.28, y: 17.25), controlPoint1: CGPoint(x: 4.28, y: 10.12), controlPoint2: CGPoint(x: 4.28, y: 15.39))
        bezierPath.addCurve(to: CGPoint(x: 4.28, y: 17.88), controlPoint1: CGPoint(x: 4.28, y: 17.64), controlPoint2: CGPoint(x: 4.28, y: 17.88))
        bezierPath.addCurve(to: CGPoint(x: 4.41, y: 18.82), controlPoint1: CGPoint(x: 4.28, y: 18.46), controlPoint2: CGPoint(x: 4.31, y: 18.64))
        bezierPath.addCurve(to: CGPoint(x: 4.72, y: 19.12), controlPoint1: CGPoint(x: 4.48, y: 18.95), controlPoint2: CGPoint(x: 4.58, y: 19.05))
        bezierPath.addCurve(to: CGPoint(x: 5.67, y: 19.25), controlPoint1: CGPoint(x: 4.9, y: 19.22), controlPoint2: CGPoint(x: 5.08, y: 19.25))
        bezierPath.addLine(to: CGPoint(x: 15.33, y: 19.25))
        bezierPath.addCurve(to: CGPoint(x: 16.28, y: 19.12), controlPoint1: CGPoint(x: 15.92, y: 19.25), controlPoint2: CGPoint(x: 16.1, y: 19.22))
        bezierPath.addCurve(to: CGPoint(x: 16.59, y: 18.82), controlPoint1: CGPoint(x: 16.42, y: 19.05), controlPoint2: CGPoint(x: 16.52, y: 18.95))
        bezierPath.addCurve(to: CGPoint(x: 16.72, y: 17.88), controlPoint1: CGPoint(x: 16.69, y: 18.64), controlPoint2: CGPoint(x: 16.72, y: 18.46))
        bezierPath.addLine(to: CGPoint(x: 16.72, y: 10.12))
        bezierPath.addCurve(to: CGPoint(x: 16.59, y: 9.18), controlPoint1: CGPoint(x: 16.72, y: 9.54), controlPoint2: CGPoint(x: 16.69, y: 9.36))
        bezierPath.addCurve(to: CGPoint(x: 16.28, y: 8.88), controlPoint1: CGPoint(x: 16.52, y: 9.05), controlPoint2: CGPoint(x: 16.42, y: 8.95))
        bezierPath.addCurve(to: CGPoint(x: 15.33, y: 8.75), controlPoint1: CGPoint(x: 16.1, y: 8.78), controlPoint2: CGPoint(x: 15.92, y: 8.75))
        bezierPath.addLine(to: CGPoint(x: 14.06, y: 8.75))
        bezierPath.addCurve(to: CGPoint(x: 13.17, y: 7.88), controlPoint1: CGPoint(x: 13.56, y: 8.75), controlPoint2: CGPoint(x: 13.17, y: 8.36))
        bezierPath.addCurve(to: CGPoint(x: 14.06, y: 7), controlPoint1: CGPoint(x: 13.17, y: 7.39), controlPoint2: CGPoint(x: 13.56, y: 7))
        bezierPath.addLine(to: CGPoint(x: 15.33, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 17.12, y: 7.34), controlPoint1: CGPoint(x: 16.19, y: 7), controlPoint2: CGPoint(x: 16.65, y: 7.09))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfArrowRight: UIImage {
        if Cache.imageOfArrowRight != nil {
            return Cache.imageOfArrowRight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 20), false, 0)
            SFAssets.drawArrowRight()

        Cache.imageOfArrowRight = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowRight!
    }

    @objc dynamic public class var imageOfArrowDown: UIImage {
        if Cache.imageOfArrowDown != nil {
            return Cache.imageOfArrowDown!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 11), false, 0)
            SFAssets.drawArrowDown()

        Cache.imageOfArrowDown = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowDown!
    }

    @objc dynamic public class var imageOfPlus: UIImage {
        if Cache.imageOfPlus != nil {
            return Cache.imageOfPlus!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            SFAssets.drawPlus()

        Cache.imageOfPlus = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPlus!
    }

    @objc dynamic public class var imageOfClose: UIImage {
        if Cache.imageOfClose != nil {
            return Cache.imageOfClose!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 12, height: 12), false, 0)
            SFAssets.drawClose()

        Cache.imageOfClose = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfClose!
    }

    @objc dynamic public class var imageOfCancelIcon: UIImage {
        if Cache.imageOfCancelIcon != nil {
            return Cache.imageOfCancelIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            SFAssets.drawCancelIcon()

        Cache.imageOfCancelIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCancelIcon!
    }

    @objc dynamic public class var imageOfBigPlus: UIImage {
        if Cache.imageOfBigPlus != nil {
            return Cache.imageOfBigPlus!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            SFAssets.drawBigPlus()

        Cache.imageOfBigPlus = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return Cache.imageOfBigPlus!
    }

    @objc dynamic public class var imageOfComposeIcon: UIImage {
        if Cache.imageOfComposeIcon != nil {
            return Cache.imageOfComposeIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            SFAssets.drawComposeIcon()

        Cache.imageOfComposeIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfComposeIcon!
    }

    @objc dynamic public class var imageOfProfileIcon: UIImage {
        if Cache.imageOfProfileIcon != nil {
            return Cache.imageOfProfileIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            SFAssets.drawProfileIcon()

        Cache.imageOfProfileIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfProfileIcon!
    }

    @objc dynamic public class var imageOfShareIcon: UIImage {
        if Cache.imageOfShareIcon != nil {
            return Cache.imageOfShareIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            SFAssets.drawShareIcon()

        Cache.imageOfShareIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShareIcon!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var arrowRightTargets: [AnyObject]! {
        get { return Cache.arrowRightTargets }
        set {
            Cache.arrowRightTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfArrowRight)
            }
        }
    }

    @objc @IBOutlet dynamic var arrowDownTargets: [AnyObject]! {
        get { return Cache.arrowDownTargets }
        set {
            Cache.arrowDownTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfArrowDown)
            }
        }
    }

    @objc @IBOutlet dynamic var plusTargets: [AnyObject]! {
        get { return Cache.plusTargets }
        set {
            Cache.plusTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfPlus)
            }
        }
    }

    @objc @IBOutlet dynamic var closeTargets: [AnyObject]! {
        get { return Cache.closeTargets }
        set {
            Cache.closeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfClose)
            }
        }
    }

    @objc @IBOutlet dynamic var cancelIconTargets: [AnyObject]! {
        get { return Cache.cancelIconTargets }
        set {
            Cache.cancelIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfCancelIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var bigPlusTargets: [AnyObject]! {
        get { return Cache.bigPlusTargets }
        set {
            Cache.bigPlusTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfBigPlus)
            }
        }
    }

    @objc @IBOutlet dynamic var composeIconTargets: [AnyObject]! {
        get { return Cache.composeIconTargets }
        set {
            Cache.composeIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfComposeIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var profileIconTargets: [AnyObject]! {
        get { return Cache.profileIconTargets }
        set {
            Cache.profileIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfProfileIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var shareIconTargets: [AnyObject]! {
        get { return Cache.shareIconTargets }
        set {
            Cache.shareIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfShareIcon)
            }
        }
    }




    @objc(SFAssetsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
